1- inline style : You can define Style in any tag by  <section style=" background: #659874"> </section>
2- Style tag in head section: 
    <style>  ## you define your rules in here  like 
        section: {Background: #ff1b68} 
        div: {Background: dark-grey}
    </style>
3- External stylesheet: define link tagin your head section io other file for CSS style by
    <link rel="stylesheet" href="Path/to/your/file">

4- in the external stylesheet fiel you define your section and then property in {}
    section {
        background : red;
    }

    h1 {
        color: blue;
        font-family: sens-serif; # this is the defailt font family
    }
5- you can use the google font 
    first visit fonts.google.com
    search for the 
    click on the plus
    copy the link tag and paste it in the head section
    copy the CSS section from the google font webstite and paste it on your CSS file

6- Selectors: helps us refer to different eleemtn in the page and assign specific styles. 
    1- element Selectors like <h1> Here is H1 tag content</h1>
        h1 {

        }
    2- class Selectors like <p class="blog-post blog-comments">you can reuse this item so assign a class
                                you can also assign multiple class name by utting space between class name </p>
        .blog-post {

        }
    3- universal
        * {

        }
    4- ID Selectors like <h1 id="main-title"> semanticly ID use only one in your html page.</h1>
        #main-title {
            
        }
    5- attribute Selectors like <button disable ></button>
        [disable] {

        }
    
    6- Specificity: 
        inline style has the highest priority
        then class selector comes next
        on the same level, the top has the higher priority than the one who comes next
        browser defaul has the lowest priority


        from lowest to highest --> tag, class and attribute, ID selectors, inline-style

    7- Inheritence:
        elements inherited from direct or indirect parents
        usually use to set one specifications on all elements we can use it with *, but * has the lowest spefificity

        better way is to set it to body class
            body {
                
            }

            font-family: inherited

    8- combinator: 
        use when we want to assign an specificaiton to one specific tag, we can do this by assigning the ID or class
        to the tag, but that is not a good approach,
        we can use combinator to select specific tag inside other tag (maybe)
        like 

        any h1 tag inside tags with #product-overview ID
        #product-overview h1 {  
            color: blue;
        }
        
7- Combinator 
    1- Adjacent Sibling   #Assign style to the first sibing that directly followed/after (direct sibling)
                          #after div tag 
        div + p { 
            color : red
        }
        <div></div>
        <p></p> #Red Color
        <p></p> #No Red Color
        <p></p> #No Red Color
        <div></div>
        <p></p> #Red Color
        <p></p> #No Red Color
    2- General Sibling   #Assign style to all sibling(s) at the same level.. 
        div ~ p {

        }
        <div></div>
        <p></p> #Red Color
        <p></p> #Red Color
        <p></p> #Red Color
        <h1></h1>
        <p></p> #Red Color
    3- Child  #give style to direct child(s) 
              #also we can expand it like div > span > p > a means all a tag that is child of p and p is child of span and ...
        div > p {

        }
    4- Descendant
        div p {

        }
8- Source of the CSS is: https://developer.mozilla.org/en-US/docs/Web/CSS/Reference

9- BOX MODEL: every element in the CSS is rounded by the box, 
    from inner to outter side, we have Padding, Border, as well as Margin.

10- Body has a margin, so its a best practice to set body margin to 0.
11 - Margin collaspsing: 
    Two elements back to back can overlap their margins, and their margins become 1 margin. 
    bigger margin always wins this competiton. 
    we also can use margin-top or margin-bottom 

12- Shorten Properties:
    border-width: 2px;
    border-style: dashed | solid;
    border-color: orange;
    
    we can combine all of these style in to one line
    border: 2px dashed orange

    or 
    margin: 5xp 10px 5px 10px; 
        Which represent top, right, bottom, left in an order
    or you can summarize it into 
        margin: 5px 10px; 
        which represent top and bottom, righ and left
        margin: 2px; 
        margin applied to all sides.

13- Block level Elements: like section and header and ....
    block level elements is different from inline elements and this is an HTML features.
    Block level elements always take full length by default.

    we can set width to px or % like
    width: 200px;
    or
    width: 50%

    this means the available space that parent of the element allowed to this element.

14- height is the same as width and space allocation comes from the parent so we can play around in that defined space.
    so if you want to set the height of an element into 400px we have to double check its parent and check 
    the hight of the parent to be at least 400px.
    if we have a nested element, we have to pass down and double check the height of 
    parent and ground parents. basically from top to down/ parent to child

15- box-sizing: border-box vs content-box 
    When you specify the hight and width of the element, you actually specify the content size, at the end, 
    padding and border will be added by the browser to your specify sizing and make the element bigger.

    By default when you add width and height, you are adding to the content-box not the whole element
    so we call it box-sizing: content-box;

    we can change that default behaviour by defining box-sizing as border-box, now the padding and border 
    will be included in the width and hight, but the margin is not included, and we can not make margin include in the border box

    box-sizing: border-box;

    box-sizing: border-box is so useful that often use as the default and defined in the universal section.

    * {
        box-sizing: border-box;
    }


16- Inline elements and block elements: The role of style =" display: block"

    in html we have inline and block level elements
    - inline elements is like <a>, they are rendered in line, if we have two inline elements
      next to each other, they are rendered in the same line.
    - block elements is like the list items <li> they are rendered on the seperate line.
      and do not take the full entire width as inline elements.
    - they inline and block elements both use the box model but for the inline elements we 
      can not use the top and bottom margin, because they donot take a new line 
      necessarily. but we can change this behaviour with the "display"  property.

      so for example we set the display="block" in the <a> property, they behaive like the block
      element and a new <a> will take the new line.

      <a style="display: block" >item 1</a>
      <a style="display: block" >item 2</a>


      - display: none
        we can use display:none to not showing th element in our web page, the main
        usage of this property is to handle the element visibility by the javascript class
      
      - display: inline-block
        we can use this style for setting elements next to each other but act them as a block element
        not an inline elements, which means we can set top and bottom margin to the inline elements like :<a>

17- Vertical-align : middle;

    When we inline tags with inline block, or when we customtize font size, 
    aligned elements would be on different height. we can fix that with vertical-align: middle. 
    we have to set the vertical-align: middle to bvoth elements., 
    in our example, both div with class as main-nav have the middle in vertical-align


18- 
