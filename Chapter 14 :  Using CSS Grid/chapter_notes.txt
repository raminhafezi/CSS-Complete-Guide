 Video 192: 

    CSS Grid    
    Grid along side flex is mostly used for designing the page nowadays. Think of grid as as a combination of rows and columns. and with the CSS grid, we define each element to place in which rows and columns on the page.

    the best tools for debugging grid display is FireFox. when you debug your grid page with the firefox, you can inspect the grid html element and grid icon. By clicking on it, border of the grid also will be visible in your page.

Like Flex, Grid also comes with parent element or grid container and children, which we called them as grid items

1) Grid Container:

    display: grid
        set parent element display: grid

        1- default Grid:
            if you set grid as a display of an html element, by default it get 1 column and based on number of child, it gets same number of rows.
            we can override this behavior by defining number of columns and rows that we want.

        2- grid-template-columns: 
                Define number of columns and their size:
                grid-template-columns: 200px 150px 20%
                which means the first column width is 200px
                second : 150px
                and the last column takes 20% of the total container width
                 
                fr: 
                    we can also use fr or fraction. to divide the entire width of the grid element and then split the columns based on that
                    
                    grid-template-columsn: 2fr 3fr 6fr 4fr
                        means divide the width of the containe to 15 portions.
                        2 portions to the first column, 3 to second column, 6 to the third column and 4 to the last column.
                auto: 
                    auto means take the remaining space, usually used for the last items in the column or row in the grid container. also with "auto", container seize shrink to the width of the content. 
                 
                repeat():
                    repeat(): is a function that you can used to devide space equally or in a pattern 
                    grid-template-columns: 
                        repeat(4, 25%) : 4 columns, each take 25% of the grid container width
                        repeat(3, 20% 80%): make 6 columns, even columsn numbers is 4times bigger than odd column number

                        grid-template-columns: repeat(2, 20% 20% auto); 6 columns
                        grid-template-rows: repeat(3, 2fr 2fr 6fr); 9 rows

                        -- auto-fill:
                                repeat() also comes with auto-fill
                                grid-rows: repeat(auto-fill, minmax(60px 90px))
                                it means, make a cell with width of 60 to 90 pixel,
                                and if you have extra, repeat yourself, if you donot, jump to the new row. so this formula fill the rows with the cell size between 60 to 90 px. and always make sure the rows are filled with cell as many as possible.

                        --auto-fit:
                                auto-fit is more like auto--fill, but they donot insert rows or columns when parent element or page ghet resized. simply suto-fit stretch the cells  to fill the gaps.

                minmax():
                    define minimum and maximum of the row or columns
                        minmax(20px, 25%) minimum 20px and maximum 25% of the width  of the container.
                        

                for the size of each clolumn we can use px, rem, %, fr, or auto

        3- grid-template-rows:
                Define number of rows and their size:
                like the columns, we can also defined rows in the grid system.

        4- grid-auto-rows:
            By default when you set display:grid, grid makes 1 columns and for each
            direct child of its container, it makes new row and push child to a new row.
            with grid-auto-rows: we can set row height

            - grid-auto-rows : minmax(12rem, auto);

        5- grid-auto-flow:
            grid default behaviour is to add a new row for every direct child of the grid container, we can overwrite with adding new column 

            - grid-auto-flow: column;

        6- grid-auto-columns:
            if the grid-auto-flow is 'column', then we can adjust the width of the column 

                - grid-auto-columns: minmax(2rem, 4rem)
                - grid-auto-columns: auto;


        7- grid-column-gap: 
                Define needed space between grid columns

        8- grid-row-gap: 
                Define needed space between grid rows.

        9- grid-gap: 
                Short form of grid-row-gap and grid-column-gap
                grid-gap: 10px 2.5rem;   10px between rows and 2.5 rem between columns
    



2) Grid item:

    - grid-column & grid-row:

    we can specify exactly where each grid item should be placed, with:
        - grid-row:  start-row-number /  end-row-number 
        - grid-column:  start-column-number / end-column-number 

        by default in the grid system, item placed from left to right and from top to the buttom. But we have an option to customize each grid item in a place that we want, maybe we want 3rd item in the first row, takes both third and forth columns all together. So basically, we can placed each item individually in thegrid system. we can say where this grid item should be seated. 
        if you have a look at the firefox grid, you can see there are lines in the grid system. and each line has a number. 
        We will use this line number to palce our item in the grid.
        we will do this by seting bellow setting to the grid item.

            number:
                - grid-column-start: "start column number"
                - grid-column-end: "end column number"
                - grid-row-start: "Start-row-number"
                - grid-row-end: "End-row-number"
                so 
                - grid-row-start: 1;
                - grid-row-end: 3;
                takes both row 1 and row 2 

                short-hand / 
                we can shortened the start and end number
                - grid-column: 
                    - grid-column: 1 / 4; we should use / 
                or
                - grid-row:
                    - grid-row: 1 / span 2
                or summarize row and column
                - grid-are:
                    - grid-area: 1 / 4 / 1 / span 2
                    the first two are start and end of the row numbers
                    the third and forth are the start and end of column numbers
                    it is important to devide with /

            span
                we cn use span also start from line number 2, takes two columns
                - grid-column-start: 2
                - grid-column-start: span 2 

            -1
                or take the whole row or column
                - grid-column-start: 1
                - grid-column-end: -1

3) Positioning: 

        - position each grid items in their rows and columns with
        justify-items and align-items:


            Justify = X or row
            align   = Y or column




        1 - Grid item individually:

            position each grid item individually. Set this setting on each grid item.

                - justify-self:
                    justify-self: (X Axis)
                    Move one grid item individually, isolated from other grid items in its cell alongisde the X axis, defaul is stretch, so it fills the whole cell space, we can set it to start, end, center as well

                - align-self:
                    align-self: (Y Axis)
                    Move one grid item individually, isolated from other grid items in its cell alongisde the Y axis, defaul is stretch, so it fills the whole cell space, we can set it to top, bottom, center as well

        2 - Grid Items:

            contrary to align/justify self we can positon the whole grid items at once.Set this setting on grid container.

                - justify-items: (X Axis)
                    it is like justify-item, but this one, items, moves all 
                    items in theirs cell vertically, default is stretch, so by default all items stretch in their cells to fill all  widths of each cell that they seat in it. you can overwrite it with start, end, center.


                - align-items:   (Y Axis)
                    it is like align-item, but this one , items, move all grid items in their cells horizontally, default is stretch, so grid items fill the height of their cells, 


        3 - Grid Content:

            This two setting, position the grid container in their HTML container element. Set this setting on grid container.

                - justify-content: (X Axis)
                    justify-content used for moving the while grid system in their container left, right, center or stretch           
                    

                - align-content:  (Y Axis)
                    align-content used for moving the while grid system in their container top, down, center or stretch




4) Grid-Template-Areas:
    we can think of the grid as a table, with fixed rows and columns
    we can named each cell and use this name to position grid-items in it
    so assume we have a grid table as 4X3 table 4 rows, 3 columns
    
    - in the grid container:
        - grid-templat-areas : "header header header header"
                              "side-left center center side-right "
                              "footer footer footer footer "

        so we have the same names as cell numbers, 12 cells, 12 names,
        if you donot want to name any space or cell, just type . in its place
        like 
            - "header-side-left header header header . . header-side-right"

        after you finished, check it out with firefox grid tool, and check,
            "display-area-names" check-box

    - in the grid-item:

        - grid-are: header;    // without '' or ""

    -Example:
        .myContainer {
            display: grid;
            grid-template-columns: repeat(6, 15%) auto;
            grid-template-rows: repeat(4, 25%);

            grid-template-areas:
                "header-left header header header header header-right"
                "side-left body body body body side-right"
                "side-left body body body body side-right"
                "footer-left footer footer footer footer  footer-right";
            }

        .grid-item {
            grid-area: header-left;
        }    

 

5) Grid with Media Query:
    
    grid template that we can define number of rows and columsn and also we have a template that we can assign a name to various cells/place holders are a very good strategy for using with media-query. With the media-query we can reshape the template-name or place-holders so rearrange items in our page when resize happen.

    Example:
        .container {
            margin: 20px;
            display: grid;
            grid-template-columns: 2fr 2fr 5fr;
            grid-template-rows: 5rem 2.5rem; 2.5rem
            justify-content: left;
            grid-template-area: 'header header header header '
                                'sideBar sideBar main main'
                                .footer footer footer footer .
        }


        @media(max-width: 40rem) { // for screen upto 40 rem we want different grid
            grid-tempalte-rows: 5rem 2.5rem 2.5rem auto;
            grid-tempalte-columns: 1fr 1fr;
            grid-template-area: 'header header '
                                'main main'
                                'sideBar sideBar'
                                '.'footer footer'
        }

        so now, on each grid items we defined its place with grid-area, with the media query, we restructire the grid container, so we donot need to change the gird items position and we save times and effort bring up with cleaner code.









6) Grid or Flex Box:

    1- One Dimention ? -----> Flex-Box is for setting elements next to each other, or bellow each other
        so basically we can say, if you have one dimention, choose flex,

    2- Two Dimentions ? -----> Grid is for two dimnetional space, when you have to place
        each element in your page layout and you know where to place each item. It is also good to have a template and then switch between layout with media query and grid.

































